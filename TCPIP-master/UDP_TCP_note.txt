p1.
    各位同學好，今天要出第二次作業，題目是「Socket Programming With UDP & TCP」

p2.
    這是Outline，首先我們先來看一下Socket

P3.
	我們可以把socket簡單看成是電腦進入internet的入口
	
    socket是由加州大學柏克萊分校設計出來
	用在Unix系統上的system call

    現今幾乎所有的作業系統都有支援Berkeley socket interface

    socket允許兩個host或者是兩個processes在同一台電腦上相互溝通

P4.
    Socket是一個介於應用層與TCP/IP protocol中間的介面。
	它把複雜的protocal 隱藏在Socket介面之後
	對使用者來說，要傳輸資料只需要使用這個interface
	之後複雜的要符合 protocol 的部分交給socket去做。

P5.
    接下來是介紹Socket的type，在圖中有四種type，這次作業會用到的是前兩個type
	STREAM這個type就是代表要使用TCP的方式來實作，那TCP是「連線型傳輸協定」。可以追蹤傳出去的資料的後續狀況，是否對方沒收到需要重送等等。
	DGRAM這個類型就是代表要使用UDP的方式來實作，那UDP是「非連線型傳輸協定」，也就是資料傳出去之後就不管他了

P6.
    接著，介紹Socket API的部分

P7.
	先看到UDP的流程圖，分別有Server跟Client，那server是被動接收資料，client會主動傳送資料。
	先看到在Server端
	server會先建立一個Socket，接著用bind告訴socket server 的 IP位址跟port 號，
	可以想像成socket是郵差，我要收到信的話郵差要先知道我家地址的感覺
	，然後開始用recvfrom接收訊息。

    那在Client的部分
	一開始也是建立Socket的服務
	但是因為client是主動傳送資料，並不需要向socket標示自己的位址，所以可以忽略掉bind直接開始傳資料。
	
	Client利用 sendto 傳送datagram給server ，Server就會接收它並且處理這筆Datagram，
	處理完後，一樣再傳送datagram回給Client
	
	server繼續接收data，client用close關閉socket，結束程式。
	
P8.
	再來看到TCP的流程圖
	這裡比UDP多了幾個function
	
	在server的部分
	一樣建socket跟bind，因為TCP是連線型資料傳輸，會先用listen監聽有沒有人要跟我連線，
	接著用accept跟client的connect function達成Three Way Handshake。
	完成後就可以開始資料傳輸，是使用send跟recv兩個function。

    接下來要介紹「Three Way Handshake」這個機制。

P9. 
    「Three Way Handshake」中文就是 「三向交握」。
    由於TCP是一個連線導向的傳輸協定，所以在彼此傳輸資料前會經過一個連線「交握」的動作，
	也就是先透過此交握動作，彼此達到協商以及交換資訊的目的。

P9.
    為了使用Socket，所以要調用Socket函數，這個函數會回傳一個類似文件描述符的控制碼。

    首先我們來看到domain這個參數，他表示的是socket使用的address體系。
    PF_UNIX是區域的process間通訊用的socket。
    PF_INET是IPv4的socket
    PF_INET6是IPv6的socket

    接著看到type這個參數，他表示的是socket的特質。

    最後是protocol，表示協定。通常都會使用預設值0，它代表的是可利用的協定會依照domain以及type的組合去決定。

P10.
    PF代表的是internet protocol家族，而AF則是代表internet adderss家族的相關協定
    理論上來說，我們在建立一個socket時，應該要使用PF_xxxx，就是前一張投一片那個domain參數。
    而AF_xxxx則是用在socket address structures，等等會介紹這個stucture。

    但是因為PF與AF協定的內容是一樣的，所以很多書上都會混用，也不會有甚麼影響。

P11.
    接著我們來看幾個會用到的function

    首先是htons()這個function
    它的功能是將無號短整數(0~65536)從主機位元組序轉換成網路位元組序。
    那為甚麼要做這一步呢?主要是因為不同的CPU有不同的位元組序，最常見的有兩種，
    第一種:Little endian(LSB)
    第二種:Big endian(MSB)
    網路位元組序是TCP/IP中規定好的一種數據表示格式，它與具體的CPU類型、操作系統無關，從而保證數據能在不同主機間傳輸時能夠被解釋。
    網路位元組序採用的是Big endian排序方式。

P12.
    再來我們看到bzero()這個function
    它的功能是將字串的前n個字元歸零。也就是清空的動作。

    inet_addr()這個function的功能是將IPv4字串型態的Address轉成網路位元組序的型態。

P13.
    bind()這個function是給定Socket一個名稱。它會繫結所建立的socket到指定的網路介面和明確的表示所接受的port number，也就是IP和port。
    若不使用bind()則會由kernal來自動分配尚未被使用到的port number，所以每次啟動server時，這個process對應到的port number都會不同。

P14.
    接著看到IPv4 Address Structure

    首先，每一個協議族群都會定義自己的結構體

    這些結構體都以sockaddr_然後再以各自的後綴做結尾。

    例如一個IPv4的結構體就是以in做結尾，而IPv6的結構體就是以in6做結尾。
    在這個結構體內宣告了一些變數:
        有結構體的長度，固定16Bytes
        Address_family，因為是IPv4所以要使用AF_INET
        Port number
        Internet address
        及最後一個sin_zero[8]，它的功用則是為了要使這個結構體與sockaddr這個structure大小相等。
    那為甚麼我們需要使用sockaddr_in這個結構體呢?
    其實從它的變數就可以知道它是用來指定與通訊端連接的本機或遠端端點位址。

P15.
    接著我們來看另一個結構體sockaddr
    它定義了兩個變數:
        Address_family:與sockaddr_in的值是一樣的
        sa_data[14]:存放IP、Port number用的
    它與sockaddr_in的差異就在於，sockaddr_in是給人使用的，他把sa_data[14]分解成sin_port, sin_addr和sin_zero。
    而sockaddr則是給系統用的。
    在大部分的用法裡，會先宣告結構體sockaddr_in，接著指定完所有資訊後，會強制轉換成sockaddr，將資料存在sockaddr結構體內，以供系統使用。

P16.
    這是一張sockaddr protocol suite的比較圖，若有興趣的可以自行去查相關資料，這邊就不多介紹。

P17.
    listen這個函數是用來通知OS/network socketfd的socket已經可以接受建立連線，將等待連線的passive socket放進一個佇列內等待。

    參數backlog是用來指定同時能處理的最大連接要求，透過這個參數可以知道，開始執行listen()時可以接受來自用戶端的TCP連線。
    
    Listen()並未開始接收連線，只是設置socket為listen模式，真正接收client端連線的是accept()。

P18.
    在這張流程圖裡，可以看到兩個queue，一個是「已完成連線」的queue，另一個則是「未完成連線」的queue。
    使用listen這個function會將一個尚未連線的socket放進「未完成連線」的queue內，透過「交握」的方式建立連線後，將socket搬移到「已完成連線」的queue，等待被accept函數使用。

P19.

    accept()這個function是由server端使用，其功用是將前頁投影片裡的「已完成連線」的queue內的socket傳到使用者的應用程式，此外，若accept成功後，會回傳一個由kernel自動產生的全新的控制符，它指向了連線的client。

    connect()這個function是由client端使用，其功用是透過3-way-handshake與server建立連線。


P20.

    recv()這個function是用來接收socket上的資料，上個UDP作業recvfrom()不同的是，recv()這個function不再需要指定是從哪裡送過來的資訊。

    send()這個function是用來傳送資料，它也不必指定要傳送到那個位址去。

P21.

    close()這個function就如字面上的意思，當操作結束後，可以使用它來釋放socket，從而停止在該socket上的任何數據操作。

P22.
    接著我們來看一些範例。

P23.
    在Client端方面:

    首先，要使用socket就必須要include相關的system call及一些libary。
    接著，我們宣告了port number和IP address。
    再來就是宣告structure sockaddr_in和一些會用到的變數。
    buffer就是我們要傳送的內容。

P24.
    接著來看到灰色框框，我們將socket()相關訊息填好後指定給一剛剛宣告好的變數，接著判斷sock變數回傳的值，若是成功，則回傳1，失敗則回傳-1。

    再來看到藍色框框，使用bzero()將宣告的結構體初始化，並且將必要的訊息賦予相對應的結構變數內。

    之後來看綠色框框，我們使用sendto()這個函數將我們的資料傳送到指定的Server端去，最後檢查傳回來的數值，若是-1，則代表沒有傳送成功。

    最後，要記得釋放socket。

P25.
    接下來是Server端的部分:

    黃色框框跟Client端一樣都是要先include需要用到的library，然後指定一個port number。

    剩下的變數宣告就跟Client端是一樣的。

    藍色框框也是相同的，一樣要給Server端基本的Socket資訊

P26.
    黃色這個框框裡面基本上都相同，唯一不同的是在address這裡，我們使用INADDR_ANY，它代表的是地址為0.0.0.0的地址,這個地址事實上表示「不確定地址」或「所有地址」、「任意地址」。

    假如，一台Server上有三個IP
    192.168.1.1
    202.202.202.202
    61.1.2.3

    如果使用serv.sin_addr.s_addr=inet_addr("192.168.1.1"); 並且監聽port3000

    這時其他電腦只有connect 192.168.1.1:3000才會成功
    connect 202.202.202.202:3000 及 connect 61.1.2.3:3000會失敗

    所以如果使用serv.sin_addr.s_addr=INADDR_ANY; ，則無論哪一個IP都可以連上。

    而且這樣做也方便日後的轉移，若我們直接寫死IP Address，則當換了一個Address時都必須來修改。


    接著，使用bind()將所建立的socket連接到指定的網路介面和明確的表示所接受的port number。並且判斷它回傳的值，若是-1則代表失敗。

    最後，使用一個loop搭配recvfrom()來接收從別的電腦傳送過來的資料。

P23.
    接下來，就是說明這次作業的要求。

P24.
    這次的作業內容就是要使用socket傳送UDP封包並且計算throughput。
    要寫一個程式從client端重複的傳送UDP封包到server端。

P25.
















